<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SDUOJ 划分石头题解 (二分查找)</title>
    <link href="/2021/04/13/SDUOJ013/"/>
    <url>/2021/04/13/SDUOJ013/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>海边有很多好看的石头🪨，war把它们收集起来依次排成一排，一共n个，第i个石头的重量为w_i<em>w**i</em>。他想将其分成m段，每一段连续，并且<strong>重量和</strong>最大的段的<strong>和最小</strong>。请你帮帮他～</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>第一行为n(1≤n≤10^5)(1≤<em>n</em>≤105)，m(m≤n)(<em>m</em>≤<em>n</em>)。</p><p>第二行n个数，第i个数为w_i(0≤wi≤10^9)<em>w**i</em>(0≤<em>w**i</em>≤109)，中间有空格。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>输出只有一个数，<strong>重量和</strong>最大的段的和。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h4 id="算法数据"><a href="#算法数据" class="headerlink" title="算法数据"></a>算法数据</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>stones[0..100010]</td><td>存储石头的重量</td></tr><tr><td>maxMass</td><td>界定二分查找的下界</td></tr><tr><td>inputSum</td><td>界定二分查找的上界</td></tr></tbody></table><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><h4 id="二分答案：最小化最大值"><a href="#二分答案：最小化最大值" class="headerlink" title="二分答案：最小化最大值"></a>二分答案：最小化最大值</h4><p>根据输入，确定上述上下界，开始二分查找。</p><p>判断函数的关键，在于输入一个判断值d作为每段的质量，判断尽量<code>以此为最小质量</code>，能否分得<code>&lt;=m</code>段。因为如果d过小，显然分段数量要很大。如果d足够大了，分段数量就可以&lt;=m，那么显然<code>能满足</code>“可以分到m段”的条件。</p><p>具体实现方式在于，按顺序遍历所有石头，并计算当前段的质量和。如果当前质量和+下一石头质量超过了d，则分段数++，其余量归零。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>可以通过输入来确定二分答案的上下界，加快速度。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; stones;<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> maxMass, inputSum;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span> </span>&#123;<br><span class="hljs-keyword">int</span> massSum = <span class="hljs-number">0</span>, divides = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span> (massSum + stones[i] &gt; d) &#123;<br>divides++;<br>massSum = stones[i];<br>&#125;<br><span class="hljs-keyword">else</span> massSum += stones[i];<br>&#125;<br><span class="hljs-keyword">if</span> (divides &gt;= m)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> lb = maxMass, ub = inputSum, mid = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (lb&lt;=ub)<br>&#123;<br>mid = (ub + lb) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (C(mid)) &#123;<br>ans = mid;<br>ub = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> lb = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; stones[i]; <br><span class="hljs-keyword">if</span> (stones[i] &gt; maxMass)maxMass = stones[i];<br>inputSum += stones[i];<br>&#125;<br>solve();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>SDUOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ TT与可怜的猫题解 (水题)</title>
    <link href="/2021/04/12/SDUOJ008/"/>
    <url>/2021/04/12/SDUOJ008/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>自从 TT 成为了助教，他就热衷于给同学们解答疑问，于是他就没有时间进行陪他的猫猫玩了，真是一只可怜的小猫。</p><p><img src="https://oj.qd.sdu.edu.cn/api/filesys/download/158001115693068325/TTandCat.png" alt="TTandCat.png"></p><p>TT 在同一时间会与很多同学同时用 QQ（TT特供版） 进行答疑，有时 TT <strong>开启</strong>一个新的窗口，开始一个新的答疑对话；有时 TT <strong>关闭</strong>一个窗口，结束一段答疑； 有时，为了及时回答着急的同学，TT会把一个对话窗口设置为<strong>置顶</strong>状态（置顶状态是一种虚拟的状态，窗口的实际位置并不会发生改变）。</p><p>你可以将 TT 的聊天窗口想象成一个队列。如果现在没有窗口处于<strong>置顶</strong>状态，那么在队列中位列第一窗口视为在<strong>顶层</strong>，否则处于<strong>置顶</strong>状态的窗口视为在<strong>顶层</strong>。请注意，不可能同时存在两个窗口处于<strong>置顶</strong>状态（也就是说，处于置顶状态的窗口，要么不存在，要么只有一个）。如果当前<strong>置顶</strong>的窗口被关闭了，则剩余队列中第一窗口视为在<strong>顶层</strong>。</p><p>TT 为了安抚自己的猫，于是给猫猫看自己的聊天记录解闷，根据猫猫看屏幕中窗口的时间，TT 给每个窗口分配了一个<strong>喜爱度</strong>，TT 认为<strong>喜爱度</strong>越高，猫猫越开心。由于猫猫具有不确定的生物特性，所以所有的<strong>喜爱度</strong>都是<strong>不同</strong>的。</p><p>作为 TT 特供版QQ的研发人员，你要负责完成的工作是为软件记录 TT 的操作，形成一个日志系统。日志有固定的记录格式：<code>OpId #X: MSG.</code> ，其中 X<em>X</em> 是操作的编号，而 <code>MSG</code> 是日志的提示信息，需要使用特定的字符串进行替换。</p><p>TT 可能会用到的操作如下：</p><ol><li><strong>Add u:</strong> TT 打开一个喜爱度为 u<em>u</em> 的新窗口，若 u<em>u</em> 不与当前窗口队列中的某个窗口重复，则该新窗口将新建成功，并成为窗口队列中的最后一个窗口。 如果创建成功，则 <code>MSG</code> 记录 <code>success</code>。 否则， <code>MSG</code> 记录 <code>same likeness </code>。</li><li><strong>Close u:</strong> TT 关掉了一个喜爱度为 u<em>u</em> 的窗口，如果该窗口存在，则将其关闭，<code>MSG</code> 记录 <code>close u with c</code>，u<em>u</em> 表示喜爱度，c<em>c</em> 表示该窗口上次打开至今交流的话的数量。若该窗口不存在，则<code>MSG</code> 记录<code>invalid likeness</code>。</li><li><strong>Chat w:</strong> TT 和<strong>顶层</strong>窗口交流了 w<em>w</em> 句话，如果当前队列中没有窗口，则<code>MSG</code> 记录<code>empty</code>，否则记录 <code>success</code>。</li><li><strong>Rotate x:</strong> 将队列中第 x<em>x</em> 个窗口放在队首，若 x<em>x</em> 大于当前队列中窗口数或小于 11 ，则<code>MSG</code> 记录<code>out of range</code>，否则记录<code>success</code>。举个例子，目前队列中有喜爱度为 5,3,2,8 的四个窗口，Rotate 3 之后，会将喜爱度为 2 的第 3 个窗口放在首位，结果为 2,5,3,8。</li><li><strong>Prior:</strong> TT 将目前喜爱度最大的窗口放在队首，如果当前队列中没有窗口，则<code>MSG</code> 记录<code>empty</code>，否则记录 <code>success</code>。</li><li><strong>Choose u:</strong> TT 将喜爱度为 u<em>u</em> 的窗口放在队首，如果喜爱度为 u<em>u</em> 的窗口存在，则<code>MSG</code> 记录<code>success</code>，否则记录<code>invalid likeness</code>。</li><li><strong>Top u:</strong> TT 将喜爱度为 u<em>u</em> 的窗口设定为<strong>置顶</strong>状态，如果喜爱度为 u<em>u</em> 的窗口存在，则<code>MSG</code> 记录<code>success</code>，否则记录<code>invalid likeness</code>。注意，处于<strong>置顶</strong>状态的窗口最多不超过一个，也就是说，如果在此次设定前已经有处于置顶状态的窗口，则原有<strong>置顶</strong>状态的窗口的<strong>置顶</strong>状态将会消失。（<strong>置顶</strong>只是一种虚拟的状态，原窗口在队列中的位置不会发生变化）</li><li><strong>Untop:</strong> TT 取消当前处于<strong>置顶</strong>状态窗口的<strong>置顶</strong>状态。如果当前没有窗口处于<strong>置顶</strong>状态，则<code>MSG</code> 记录<code>no such person</code>，否则记录<code>success</code>。</li></ol><p>最后，由于TT要给自己的猫猫树立一个讲文明有礼貌的榜样，所以在上述操作完成后，还要进行若干次操作，这些操作是：与当前队列中所有说过话的窗口说拜拜。<code>MSG</code> 记录<code>Bye u: c</code>， u<em>u</em> 表示喜爱度，c<em>c</em> 表示该窗口上次打开至今交流的话的数量。即：TT 先和位于<strong>顶层</strong>的窗口说拜拜，然后将其关闭，如果TT没有和当前<strong>顶层</strong>窗口说过话，则直接将其关闭，如此操作下去，直到队列为空。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>第一行包含一个整数 T (T \leq 5)<em>T</em>(<em>T</em>≤5)，表示数据组数。</p><p>对于每组数据，第一行一个 n<em>n</em>，表示执行的操作数，其中 0&lt;n\leq 50000&lt;<em>n</em>≤5000。接下来 n<em>n</em> 行，每行输入一个操作，保证所有输入数据中的整数不大于 10^9109。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>对于每个指定的操作，按照日志的格式，每个操作行。对于最后的非指定操作，同样按照日志的格式，每个操作一行。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>比较简单的模拟</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">int</span> dataGroupCnt;<br><span class="hljs-keyword">int</span> opCnt;<span class="hljs-comment">//本组操作数量</span><br><span class="hljs-built_in">string</span> curOp;<span class="hljs-comment">//当前操作</span><br>ll curArg;<br>ll topped = <span class="hljs-number">-1</span>;<br><span class="hljs-built_in">deque</span>&lt;ll&gt; windows;<br><span class="hljs-built_in">set</span>&lt;ll&gt; windowsSet;<br><span class="hljs-built_in">unordered_map</span>&lt;ll, ll&gt; chatsPerWindow;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> opid[] = <span class="hljs-string">&quot;OpId #&quot;</span>, col[] = <span class="hljs-string">&quot;: &quot;</span>, dot[] = <span class="hljs-string">&quot;.&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;/home/linton/Desktop/CSP/a.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;/home/linton/Desktop/CSP/a.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br><br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; dataGroupCnt;<br>    <span class="hljs-keyword">while</span> (dataGroupCnt--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; opCnt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> o = <span class="hljs-number">1</span>; o &lt;= opCnt; o++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; curOp;<br><br>            <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Add&quot;</span>) &#123;<br><br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;curArg);<br>                <span class="hljs-keyword">if</span> (!windowsSet.count(curArg)) &#123;<br>                    windowsSet.insert(curArg);<br>                    windows.push_back(curArg);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;same likeness&quot;</span>, dot);<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Close&quot;</span>) &#123;<br><br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;curArg);<br>                <span class="hljs-keyword">if</span> (windowsSet.count(curArg)) &#123;<br>                    <span class="hljs-keyword">if</span> (topped == curArg)topped = <span class="hljs-number">-1</span>;<br><br>                    windowsSet.erase(curArg);<br>                    windows.erase(find(windows.begin(), windows.end(), curArg));<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%lld%s%lld%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;close &quot;</span>, curArg, <span class="hljs-string">&quot; with &quot;</span>, chatsPerWindow[curArg], dot);<br>                    chatsPerWindow[curArg] = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;invalid likeness&quot;</span>, dot);<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Chat&quot;</span>) &#123;<br><br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;curArg);<br>                <span class="hljs-keyword">if</span> (topped != <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                    chatsPerWindow[topped] += curArg;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!windows.empty()) &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                        chatsPerWindow[windows.front()] += curArg;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;empty&quot;</span>, dot);<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Rotate&quot;</span>) &#123;<br><br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;curArg);<br>                <span class="hljs-keyword">if</span> (curArg &gt; windows.size()||curArg&lt;<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;out of range&quot;</span>, dot);<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">auto</span> ite = windows.begin();<br>                    ite += curArg - <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">int</span> value = *ite;<br>                    windows.erase(ite);<br>                  <br>                    windows.push_front(value);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Prior&quot;</span>) &#123;<br><br>                <span class="hljs-keyword">if</span> (!windows.empty()) &#123;<br>                    <span class="hljs-keyword">int</span> maxLikeness = *(windowsSet.rbegin());<br>                    <span class="hljs-keyword">auto</span> ite = find(windows.begin(), windows.end(), maxLikeness);<br>                    <span class="hljs-keyword">int</span> value = *ite;<br>                    windows.erase(ite);                   <br>                    windows.push_front(value);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;empty&quot;</span>, dot);<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Choose&quot;</span>) &#123;<br><br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;curArg);<br>                <span class="hljs-keyword">if</span> (windowsSet.count(curArg)) &#123;<br>                    <span class="hljs-keyword">auto</span> ite = find(windows.begin(), windows.end(), curArg);<br>                    <span class="hljs-keyword">int</span> value = *ite;<br>                    windows.erase(ite);                               <br>                    windows.push_front(value);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;invalid likeness&quot;</span>, dot);<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Top&quot;</span>) &#123;<br><br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;curArg);<br>                <span class="hljs-keyword">if</span> (windowsSet.count(curArg)) &#123;<br>                    topped = curArg;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;invalid likeness&quot;</span>, dot);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (curOp == <span class="hljs-string">&quot;Untop&quot;</span>) &#123;<br><br>                <span class="hljs-keyword">if</span> (topped != <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;success&quot;</span>, dot);<br>                    topped = <span class="hljs-number">-1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%s\n&quot;</span>, opid, o, col, <span class="hljs-string">&quot;no such person&quot;</span>, dot);<br>            &#125;<br><br><br><span class="hljs-comment">//  for(auto i= windows.begin();i!=windows.end();i++)cout&lt;&lt;*i&lt;&lt;&quot;,&quot;&lt;&lt;chatsPerWindow[*i]&lt;&lt;&quot; &quot;;</span><br><span class="hljs-comment">//         cout&lt;&lt;endl;</span><br>        &#125;<br><br>        <span class="hljs-keyword">int</span> curUser = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// for(auto i= windows.begin();i!=windows.end();i++)cout&lt;&lt;*i&lt;&lt;&quot;,&quot;&lt;&lt;chatsPerWindow[*i]&lt;&lt;&quot; &quot;;</span><br>        <span class="hljs-comment">// cout&lt;&lt;endl;</span><br><br>        <span class="hljs-keyword">if</span>(topped!=<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">if</span> (chatsPerWindow[topped])<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%lld%s%lld%s\n&quot;</span>, opid, ++opCnt, col, <span class="hljs-string">&quot;Bye &quot;</span>, topped, <span class="hljs-string">&quot;: &quot;</span>, chatsPerWindow[topped], dot);<br>            windows.erase(find(windows.begin(), windows.end(), topped));<br>        &#125;<br>        <br>        <span class="hljs-keyword">while</span> (!windows.empty())<br>        &#123;<br>            curUser = windows.front();<br>            <span class="hljs-keyword">if</span> (chatsPerWindow[curUser]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%lld%s%s%lld%s%lld%s\n&quot;</span>, opid, ++opCnt, col, <span class="hljs-string">&quot;Bye &quot;</span>, curUser, <span class="hljs-string">&quot;: &quot;</span>, chatsPerWindow[curUser], dot);<br>            windows.pop_front();<br>        &#125;<br><br>        topped = <span class="hljs-number">-1</span>;<br>        windowsSet.clear();<br>        chatsPerWindow.clear();<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>SDUOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ 时间复杂度题解 (模拟)</title>
    <link href="/2021/04/12/SDUOJ009/"/>
    <url>/2021/04/12/SDUOJ009/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>分析算法的时间复杂度是评价算法性能的重要方式之一，对于同一问题来说，拥有线性时间复杂度的算法往往比拥有平方级别时间复杂度的算法要快很多，因此拥有线性时间复杂度的算法往往优于拥有平方级别时间复杂度的算法。</p><p>通常，可以根据输入n的值确定算法的运行时间，n可以表示要排序的对象数，多边形顶点数等等。现给出一段简易的程序，程序规则如下，其中<number>可以是任何非负整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs language">&lt; Program &gt; ::&#x3D; &quot;BEGIN&quot; &lt; Statementlist &gt; &quot;END&quot; <br><br>&lt; Statementlist &gt; ::&#x3D; &lt; Statement &gt; | &lt; Statement &gt; &lt; Statementlist &gt; <br><br>&lt; Statement &gt; ::&#x3D; &lt; LOOP-Statement &gt; | &lt; OP-Statement &gt; <br><br>&lt; LOOP-Statement &gt; ::&#x3D; &lt; LOOP-Header &gt; &lt; Statementlist &gt; &quot;END&quot; <br><br>&lt; LOOP-Header &gt; ::&#x3D; &quot;LOOP&quot; &lt; number &gt; | &quot;LOOP n&quot; <br><br>&lt; OP-Statement &gt; ::&#x3D; &quot;OP&quot; &lt; number &gt;<br></code></pre></td></tr></table></figure><p>针对该规则下的程序的运行时间可以如下计算：执行OP语句所花费的时间与其参数指定的时间相同（即为number）。LOOP语句到其对应的END之间所有语句执行的次数与LOOP后的参数相同（即为number或n）。程序运行时间是其组成部分的时间总和。因此，总运行时间通常取决于n。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一段程序，空格和换行符可以出现在程序中的任何位置，但不能出现在关键字BEGIN，END，LOOP和OP中或整数值中。LOOP的循环嵌套深度最多为10。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>以n为单位输出程序的运行时间，即输出一个化简后的Y（Y&lt;=10）次多项式，形如“Runtime = a<em>n^10+b</em>n^9+ . . . +i<em>n^2+ j</em>n+k”，若n的某一项系数为0则直接省略该项,若系数为1则省略其系数。<br>如果运行时间为0，则只需打印 “Runtime = 0”。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs language">BEGIN<br>   LOOP n<br>     LOOP n<br>       OP 3<br>       OP 4<br>       LOOP 4<br>         OP 3<br>       END<br>     END<br>   END<br>   OP 7<br>END<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">Runtime &#x3D; 19*n^2+7<br></code></pre></td></tr></table></figure><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>Runtime = n*(n*(3+4+4<em>3))+7=19</em>n^2+7</p><h3 id="数据范围说明"><a href="#数据范围说明" class="headerlink" title="数据范围说明"></a>数据范围说明</h3><p>LOOP循环嵌套深度&lt;=10且关键字总数不超过50<br>且所有运算均在int范围内进行<br>对于测试点1，保证只包含OP语句<br>对于测试点2,3，保证只有一段Statementlist且只有一层循环<br>对于测试点4，保证只有一段Statementlist</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h4 id="输入过程中的数据结构"><a href="#输入过程中的数据结构" class="headerlink" title="输入过程中的数据结构"></a>输入过程中的数据结构</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>depth</td><td>当前嵌套层数</td></tr><tr><td>args[0…14]</td><td>下标的含义是n的幂次。表示最终化简式中，对应n的此幂次的项系数（多开余量）</td></tr><tr><td>ops[0…14]</td><td>对应depth的这一层的循环次数。</td></tr><tr><td>op</td><td>当前关键字。包括LOOP、BEGIN、END、OP。</td></tr><tr><td>op2</td><td>第二关键字。</td></tr><tr><td>cur_arg</td><td>当前处理输入所在的层数往回走，记录经过的嵌套层的所有循环次数的乘积（指数字，除了n）。</td></tr><tr><td>n_depth</td><td>当前处理输入所在的层数往回走，记录一共经过了多少层循环次数为n的嵌套层。</td></tr></tbody></table><h4 id="解答过程中的数据结构"><a href="#解答过程中的数据结构" class="headerlink" title="解答过程中的数据结构"></a>解答过程中的数据结构</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>fa</td><td>用于标志当前项是否为式子的第一项（即前面无需跟“+”）。</td></tr><tr><td>fb</td><td>用于标志整个程序的复杂度是否对于n的各个幂次来说，都是0.如果各个幂次都是0，则可以直接输出time=0.</td></tr></tbody></table><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><h4 id="处理输入，并当场完成“多项式化简”"><a href="#处理输入，并当场完成“多项式化简”" class="headerlink" title="处理输入，并当场完成“多项式化简”"></a>处理输入，并当场完成“多项式化简”</h4><p>维护depth，一开始为0.</p><p>开始while循环，当depth=-1时结束。因为这时读入了程序结束的那个END。</p><p>每次处理时，分三种情况。</p><p>如果读入END，则depth–即可。因为END了，下一次再处理读入时，就从上一级做即可。</p><p>如果读入LOOP，则若n，记录当前depth的ops为-1，否则为操作数。即把这层循环的次数记录下来。</p><p>如果读入OP，则初始化cur_arg和n_depth，从它的上层(即depth-1)开始循环，一直到0层，考察本层的循环次数。如果为n则n_depth++，否则cur_arg直接乘循环次数。最后处理n_depth，即让n幂次为n_depth的系数加上刚才的cur_arg*操作数即可。这样就站在某个幂次的n的角度，更新了其前面的系数。</p><h4 id="处理前面化简好的n的各次幂的系数，并按幂次从高到低输出"><a href="#处理前面化简好的n的各次幂的系数，并按幂次从高到低输出" class="headerlink" title="处理前面化简好的n的各次幂的系数，并按幂次从高到低输出"></a>处理前面化简好的n的各次幂的系数，并按幂次从高到低输出</h4><p>维护fa，fb，都先初始化为0.</p><p>循环11次（因为幂次取值范围是0…10），每次循环先检查args[i]是否为0：</p><p>如果为0说明这一项不存在（因为系数是0），跳过。</p><p>如果不为0说明这一项的系数就是args[i]。</p><p>args[i]不为零，进入打印的过程：先把fb置1。</p><p>每次打印，分fa为1和为0两种情况。如果为0，则打印时加个“+”，否则不加。当然每次打印如果fa=0，则立即置1.</p><p>打印只需要对i==0、i==1两种情况进行特殊处理。前者是n不加”^”,后者是不含n。</p><p>走完11次循环，如果fb仍为0，则单独处理，输出time=0即可。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>千万不能去模拟手动化简多项式的过程。否则非常麻烦。</p><p>在输入的过程中直接针对n的各个幂次计算他们的系数，高效而精妙。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> ops[<span class="hljs-number">15</span>];<br><span class="hljs-keyword">int</span> args[<span class="hljs-number">15</span>];<br><span class="hljs-built_in">string</span> op, op2;<br><span class="hljs-keyword">int</span> fa, fb;<br><span class="hljs-keyword">int</span> depth;<br><span class="hljs-keyword">int</span> cur_arg, n_depth;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sti</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str)</span></span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.length(); i++)res = res * <span class="hljs-number">10</span> + str[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Runtime = &quot;</span>;<br>fa = fb = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">11</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br><span class="hljs-keyword">if</span> (args[i] == <span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">else</span> &#123;<br>fb = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span> (fa == <span class="hljs-number">0</span>)<br>&#123;<br>fa = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; args[i];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; args[i];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span> (fa == <span class="hljs-number">0</span>)&#123;<br>fa = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span> &lt;&lt; args[i] &lt;&lt; <span class="hljs-string">&quot;*n&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;n&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; args[i] &lt;&lt; <span class="hljs-string">&quot;*n&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;+n&quot;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (fa == <span class="hljs-number">0</span>)&#123;<br>fa = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-number">1</span>)<br><span class="hljs-built_in">cout</span> &lt;&lt; args[i] &lt;&lt; <span class="hljs-string">&quot;*n^&quot;</span> &lt;&lt; i;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;n^&quot;</span> &lt;&lt; i;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; args[i] &lt;&lt; <span class="hljs-string">&quot;*n^&quot;</span> &lt;&lt; i;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;+n^&quot;</span> &lt;&lt; i;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (fb == <span class="hljs-number">0</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span>;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br><br>ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br><span class="hljs-built_in">cin</span> &gt;&gt; op;<br>depth = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(args, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(args));<br><br><span class="hljs-keyword">while</span> (depth != <span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; op;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;LOOP&quot;</span>)&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; op2;<br><span class="hljs-keyword">if</span> (op2 == <span class="hljs-string">&quot;n&quot;</span>) ops[depth++] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> ops[depth++] = sti(op2);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;END&quot;</span>)depth--;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;OP&quot;</span>)&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; op2;<br>cur_arg = <span class="hljs-number">1</span>;<br>n_depth = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = depth - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br><span class="hljs-keyword">if</span> (ops[j] == <span class="hljs-number">-1</span>)n_depth++;<br><span class="hljs-keyword">else</span> cur_arg = cur_arg * ops[j];<br>&#125;<br>args[n_depth] = args[n_depth] + cur_arg * sti(op2);<br>&#125;<br>&#125;<br><br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>SDUOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ 公路修建题解 (并查集)</title>
    <link href="/2021/04/12/SDUOJ010/"/>
    <url>/2021/04/12/SDUOJ010/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>你现在是城市的主人<br>现在有 n<em>n</em> 个村庄，要修建 m<em>m</em> 条路，每修建一条路，道路是双向的，输出至少还需要修建几条，可以让所有村庄互相可达。<br>一开始路为 00 条</p><p>数据保证有解</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 n,m<em>n</em>,<em>m</em> , 0\le n,m\le10^50≤<em>n</em>,<em>m</em>≤105<br>接下来有 m<em>m</em> 行，每行 a,b<em>a</em>,<em>b</em> 代表修建了一条从第 a<em>a</em> 个村庄，到第 b<em>b</em> 个村庄的路。<br>1\le a,b\le n1≤<em>a</em>,<em>b</em>≤<em>n</em><br>a<em>a</em> 和 b<em>b</em> 可能相同。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一共 m<em>m</em> 行，第 i<em>i</em> 个数代表已经修建了前 i<em>i</em> 条路时，最少还需要修建几条，可以让所有村庄互相可达。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">4<br>3<br>2<br>2<br>2<br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>parent[0…100005]</td><td>并查集的各个节点的父节点。</td></tr><tr><td>sets</td><td>当前存在的集合（等价类）个数。</td></tr></tbody></table><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><h4 id="利用并查集确定等价类个数"><a href="#利用并查集确定等价类个数" class="headerlink" title="利用并查集确定等价类个数"></a>利用并查集确定等价类个数</h4><p>若两个村庄联通，则它们必然属于同一个<code>等价类</code>。</p><p>对于每个输入，就对两个村庄所在集合进行合并。每次合并让sets–即可。</p><p>每次输出当前sets值即可。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>需要进行路径压缩，否则会<code>TLE</code>。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> get<span class="hljs-constructor">Parent(<span class="hljs-params">int</span> <span class="hljs-params">i</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (parent<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span><span class="hljs-operator"> == </span>i)return i;<br>    return get<span class="hljs-constructor">Parent(<span class="hljs-params">parent</span>[<span class="hljs-params">i</span>] = <span class="hljs-params">parent</span>[<span class="hljs-params">parent</span>[<span class="hljs-params">i</span>]])</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>带有路径压缩的getParent,即在每次递归调用时进行压缩.</p><p>以与代表元直接邻接的临接的点为例,则它的<code>parent[parent[i]]</code>就是它的父节点的父节点,也就是代表元节点.相当于把它的父节点变成了代表元节点.</p><p>其余节点都按类似的方式往代表元节点靠近一步.整棵并查集树就<code>变扁了</code>.</p><p>以此种方式进行路径压缩,可以达到树高度=1的结果.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-keyword">int</span> n, m, sets, reqA, reqB;<br><span class="hljs-keyword">int</span> parent[<span class="hljs-number">100005</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getParent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (parent[i] == i)<span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">return</span> getParent(parent[i] = parent[parent[i]]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> p1 = getParent(a);<br>    <span class="hljs-keyword">int</span> p2 = getParent(b);<br>    <span class="hljs-keyword">if</span> (p1 != p2) &#123;<br>        parent[p1] = p2;<br>        sets--;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    sets = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)parent[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;reqA, &amp;reqB);<br>        merge(reqA, reqB);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; sets - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    solve();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>SDUOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ 网络铺设题解 (BFS链式前向星)</title>
    <link href="/2021/04/12/SDUOJ011/"/>
    <url>/2021/04/12/SDUOJ011/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>你现在是城市的主人<br>现在有 n<em>n</em> 个村庄，已经修建了 n-1<em>n</em>−1 条道路，使得各个村庄作为节点，路作为边，构成一棵树。<br>假设第 a<em>a</em> 个村庄到第 b<em>b</em> 个村庄有路相连，则从 a<em>a</em> 走到 b<em>b</em> 或者从 b<em>b</em> 走到 a<em>a</em> 需要走 1\text{m}1m 。</p><p>你需要输出 n<em>n</em> 个数，第 i<em>i</em> 个数代表从第 i<em>i</em> 个村庄出发，距离他最远的村庄的距离</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 n<em>n</em> , 0\le n\le10^50≤<em>n</em>≤105<br>接下来有 n-1<em>n</em>−1 行，每行 a,b<em>a</em>,<em>b</em> 代表第 a<em>a</em> 个村庄，到第 b<em>b</em> 个村庄有一条路。<br>1\le a,b\le 10^51≤<em>a</em>,<em>b</em>≤105</p><p>保证输入结构是一棵树</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行 n<em>n</em> 个数，表示答案</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h4 id="node结构体"><a href="#node结构体" class="headerlink" title="node结构体"></a>node结构体</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>next</td><td>链表节点的next域</td></tr><tr><td>num</td><td>节点编号</td></tr></tbody></table><h4 id="链式前向星的数据"><a href="#链式前向星的数据" class="headerlink" title="链式前向星的数据"></a>链式前向星的数据</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>sn</td><td>最近新建的node在申请空间中的下标</td></tr><tr><td>storage[0…300002]</td><td>存储所有的链表节点</td></tr><tr><td>nodes[0…105001]</td><td>存储所有的头节点</td></tr></tbody></table><h4 id="算法数据"><a href="#算法数据" class="headerlink" title="算法数据"></a>算法数据</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>max1[0..105001]</td><td>从第一个最大的点到各个点的距离</td></tr><tr><td>max2[0..105001]</td><td>从第二个最大的点到各个点的距离</td></tr></tbody></table><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><h4 id="构建链式前向星"><a href="#构建链式前向星" class="headerlink" title="构建链式前向星"></a>构建链式前向星</h4><p>先在nodes数组中初始化n个域，表示n个图节点。</p><p>为他们分别<code>安排哨兵</code>：让所有的头节点的next都为num=-1，next=-1.（以后如果要往这个链上插入新点，都是要在头节点和头节点的next之间插入，这样复杂度最低。<code>我们哨兵的作用是无需单独处理这条链为空的情况。</code>）</p><p>写好构建单向边的函数：<code>让sn++，代表申请内存空间</code>，然后按链表的方式操作即可。注意遵循链式前向星的插入方法：即头节点和其next之间。</p><p>写好构建双向边的函数：两次调用上述函数。</p><h4 id="四次BFS解决问题"><a href="#四次BFS解决问题" class="headerlink" title="四次BFS解决问题"></a>四次BFS解决问题</h4><p>这里BFS需要额外加一个操作：每次BFS新节点入队时，记录新节点的距离是当前节点的+1.</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>无。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> num;<br>    Node() :next(<span class="hljs-number">-1</span>), num(<span class="hljs-number">-1</span>) &#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">int</span> n, iv1, iv2, sn;<br><span class="hljs-keyword">int</span> max1[<span class="hljs-number">105001</span>], max2[<span class="hljs-number">105001</span>];<br>Node storage[<span class="hljs-number">300002</span>];<br>Node nodes[<span class="hljs-number">105001</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> newNode = ++sn;<br>    storage[newNode].num = v2;<br>    storage[newNode].next = nodes[v1].next;<br>    nodes[v1].next = newNode;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addNewEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>    createEdge(v1, v2);<br>    createEdge(v2, v1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">bool</span> mode,<span class="hljs-keyword">bool</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> cur = nodes[start].next;<br>    <span class="hljs-keyword">int</span> last = start;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; vis;<br>    <span class="hljs-keyword">while</span> (storage[cur].next!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        q.push(storage[cur].num);<br>        cur = storage[cur].next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> theNum = q.front();<br>        q.pop();<br>        vis.insert(theNum);<br>        last = theNum;<br>        cur = nodes[theNum].next;<br>        <span class="hljs-keyword">while</span> (storage[cur].next != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!vis.count(storage[cur].num)) &#123;<br>                q.push(storage[cur].num); <br>                <span class="hljs-keyword">if</span> (mode)key ? max1[storage[cur].num] = max1[theNum] + <span class="hljs-number">1</span> : max2[storage[cur].num] = max2[theNum] + <span class="hljs-number">1</span>;<br>            &#125;<br>            cur = storage[cur].next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> last;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> far1 = bfs(<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">int</span> far2 = bfs(far1,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);<br>    bfs(far1, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>    bfs(far2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, max(max1[i]+<span class="hljs-number">1</span>, max2[i]+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">int</span> newNode = ++sn;<br>        nodes[i].num = i; <br>        nodes[i].next = newNode;<span class="hljs-comment">//哨兵</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;iv1, &amp;iv2);<br>        addNewEdge(iv1, iv2);<br>    &#125;<br>    solve();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>SDUOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ 水渠设计题解 (贪心、最小生成树)</title>
    <link href="/2021/04/12/SDUOJ012/"/>
    <url>/2021/04/12/SDUOJ012/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>你现在是城市的主人<br>现在有 n<em>n</em> 个田地需要灌溉。<br>可以选择修建 m<em>m</em> 个引水渠，第 i<em>i</em> 条从第 a<em>a</em> 个田地到第 b<em>b</em> 个田地，花费 c<em>c</em> 元。<br>现在可以买任意多个抽水机，买一个抽水机需要花费 p<em>p</em> 元。如果在一个田地旁边安置一个抽水机，则该田地会被灌溉。<br>水可以顺着水渠流动。<br>求让每一块田地都能被灌溉的最小花费。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行三个整数 n,m,p<em>n</em>,<em>m</em>,<em>p</em> , 0\le n,m\le10^5,p\le 10^90≤<em>n</em>,<em>m</em>≤105,<em>p</em>≤109<br>接下来有 m<em>m</em> 行，每行 a,b,c<em>a</em>,<em>b</em>,<em>c</em> 代表修建了一条从第 a<em>a</em> 个田地，到第 b<em>b</em> 个田地的水渠，花费 c<em>c</em> 元。<br>1\le a,b\le n1≤<em>a</em>,<em>b</em>≤<em>n</em>，c&lt;=10^9<em>c</em>&lt;=109</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个数表示答案。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">8<br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h4 id="Edge结构体"><a href="#Edge结构体" class="headerlink" title="Edge结构体"></a>Edge结构体</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>v1,v2</td><td>~</td></tr><tr><td>val</td><td>~</td></tr><tr><td>重载运算符&lt;</td><td>便于堆排序，每次取最小边</td></tr></tbody></table><h4 id="算法数据"><a href="#算法数据" class="headerlink" title="算法数据"></a>算法数据</h4><table><thead><tr><th>标识符</th><th>解释</th></tr></thead><tbody><tr><td>edges堆</td><td>kurskal用</td></tr><tr><td>parent[0…100005]</td><td>并查集用</td></tr><tr><td>sets</td><td>当前等价类的个数</td></tr></tbody></table><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><h4 id="kruskal中的贪心"><a href="#kruskal中的贪心" class="headerlink" title="kruskal中的贪心"></a>kruskal中的贪心</h4><p>正常使用。但是为了保证成本最低，需要贪心。</p><p>每次操作，有两种选择，其一是增加一共边，让当前的树长大；另一种选择就是保持原来的森林。前者的成本是修路的价格，后者的成本是一个抽水机的价格。那么如果修路比抽水机便宜就修路，否则反之。</p><p>修路要维护set和res(答案)：每次修路，set都–，并且更新答案即可。</p><p>最后统计set个数，就是抽水机个数。让答案再加抽水机个数*价格。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>虽然输入的数据在int范围内，但是它需要与其他数据相乘。这样就会爆int。因此都要用long long。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v1, v2, val;<br>    Edge(<span class="hljs-keyword">int</span> v1_,<span class="hljs-keyword">int</span> v2_,<span class="hljs-keyword">int</span> val_) :v1(v1_), v2(v2_), val(val_)&#123;&#125;;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> Edge&amp; e)<span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> val &gt; e.val;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-keyword">int</span> n, m, a, b, c, sn, sets;<br>ll p;<br><span class="hljs-keyword">int</span> parent[<span class="hljs-number">100005</span>];<br><span class="hljs-built_in">priority_queue</span>&lt;Edge&gt; edges;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getParent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (parent[i] == i)<span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">return</span> getParent(parent[i] = parent[parent[i]]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> p1 = getParent(a);<br>    <span class="hljs-keyword">int</span> p2 = getParent(b);<br>    <span class="hljs-keyword">if</span> (p1 != p2) &#123; <br>        parent[p1] = p2; <br>        sets--;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span> </span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!edges.empty()) &#123;<br>        Edge e = edges.top();<br>        edges.pop();<br>        <span class="hljs-keyword">int</span> par1 = getParent(e.v1), par2 = getParent(e.v2);<br>        <span class="hljs-keyword">if</span> (par1 != par2 &amp;&amp; e.val &lt; p) &#123;<br>            merge(e.v1, e.v2);<br>            res += e.val;<br>        &#125;<br>    &#125;<br>    res += sets * p;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        edges.emplace(a, b, c);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)parent[i] = i;<br>    sets = n;<br>    kruskal();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>SDUOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文搞懂后缀数组的倍增实现</title>
    <link href="/2021/04/11/SA1/"/>
    <url>/2021/04/11/SA1/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是后缀数组-Suffix-Array"><a href="#什么是后缀数组-Suffix-Array" class="headerlink" title="什么是后缀数组 (Suffix Array)"></a>什么是后缀数组 (Suffix Array)</h2><h4 id="前置知识：字符串排序"><a href="#前置知识：字符串排序" class="headerlink" title="前置知识：字符串排序"></a>前置知识：字符串排序</h4><p>对字符串之间的排序我们给出以下定义：</p><p>关于字符串的大小比较,是指通常所说的“字典顺序”比较,也就是对于两个字符串u、v, 令 i 从 1开始顺次比较 u[i] 和 v[i]。</p><p> 如果u[i] = v[i] 则令i加1， 否则若u[i]&lt;vi则认为u&lt;v，u[i]&gt;vi则认为u&gt;v，比较结束。</p><p>如果i&gt;len(u)或者i&gt;len(v)仍比较不出结果，那么若len(u)&lt;len(v)则认为uv，若len(u)=len(v)则认为u=v，若len(u)&gt;len(v)则u&gt;va。</p><h4 id="通俗定义"><a href="#通俗定义" class="headerlink" title="通俗定义"></a>通俗定义</h4><p>后缀是指从某个位置开始到整个串末尾结束的一个特殊子串。后缀数组是SA、RK两个数组的统称。通过这两个数组，我们可以高效地完成某些字符串的处理操作。</p><h4 id="SA数组"><a href="#SA数组" class="headerlink" title="SA数组"></a>SA数组</h4><p>SA数组即Suffix Array。</p><p>先将以下标[1…n]起始的各个子串拿出来，并以单调不降的升序排列。</p><p>SA[i]的含义是在上述排列中，排名i（即第 i 小）的子串是从哪个下标起始的。</p><h4 id="RK数组"><a href="#RK数组" class="headerlink" title="RK数组"></a>RK数组</h4><p>RK数组即Rank。</p><p>先将以下标[1…n]起始的各个子串拿出来，并以单调不降的升序排列。</p><p>RK[i]的含义是以下标i为起始的子串，它在上述排列中排名第几（即第几小）。</p><h4 id="RK和SA数组的关系"><a href="#RK和SA数组的关系" class="headerlink" title="RK和SA数组的关系"></a>RK和SA数组的关系</h4><p>显然有：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">RK</span>[<span class="hljs-symbol">SA</span>[i]]=i，<span class="hljs-symbol">SA</span>[<span class="hljs-symbol">RK</span>[i]]=i.<br></code></pre></td></tr></table></figure><p>即它们是互逆运算。</p><h2 id="生成后缀数组的朴素方法-堆排序"><a href="#生成后缀数组的朴素方法-堆排序" class="headerlink" title="生成后缀数组的朴素方法 (堆排序)"></a>生成后缀数组的朴素方法 (堆排序)</h2><h4 id="先看代码"><a href="#先看代码" class="headerlink" title="先看代码"></a>先看代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* sa,<span class="hljs-keyword">int</span>* rk,<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str)</span> </span>&#123;<br>saString* suffixStrs = <span class="hljs-keyword">new</span> saString[str.length() + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">priority_queue</span>&lt;saString&gt; heap;<br><span class="hljs-built_in">stack</span>&lt;saString&gt; stk;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= str.length(); i++) &#123;<br>suffixStrs[i].val = str.substr(i - <span class="hljs-number">1</span>); <br>suffixStrs[i].<span class="hljs-built_in">begin</span> = i;<br>heap.push(suffixStrs[i]);<br>&#125;<br><span class="hljs-keyword">while</span> (!heap.empty())&#123;<br>stk.push(heap.top());<br>heap.pop();<br>&#125;<br><span class="hljs-keyword">int</span> rank = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!stk.empty())&#123;<br>sa[++rank] = stk.top().<span class="hljs-built_in">begin</span>;<br>rk[stk.top().<span class="hljs-built_in">begin</span>] = rank;<br>stk.pop();<br>&#125;<br><span class="hljs-keyword">delete</span>[]suffixStrs;<br>&#125;<span class="hljs-comment">//比较两个字符串的复杂度是O（n），堆排序是O（nlogn），故整体是O（n^2logn）.</span><br></code></pre></td></tr></table></figure><h2 id="基于倍增算法的生成方法"><a href="#基于倍增算法的生成方法" class="headerlink" title="基于倍增算法的生成方法"></a>基于倍增算法的生成方法</h2><h4 id="先看代码-1"><a href="#先看代码-1" class="headerlink" title="先看代码"></a>先看代码</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">void</span> doubleHeapSort(compPair* cp,<span class="hljs-built_in">int</span>* <span class="hljs-keyword">order</span>,<span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp; len,<span class="hljs-built_in">int</span>&amp; subLen) &#123;<br><span class="hljs-comment">//利用堆排序，时间复杂度为O（nlogn）</span><br><span class="hljs-comment">//cp:待比较的</span><br><span class="hljs-comment">//order:比较结果输出</span><br><span class="hljs-comment">//len:字符串长度</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) &#123;<br><span class="hljs-keyword">if</span> (i + subLen &lt;= len) &#123;<br>cp[i].first = <span class="hljs-keyword">order</span>[i];<br>cp[i].second = <span class="hljs-keyword">order</span>[i + subLen];<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cp[i].first = <span class="hljs-keyword">order</span>[i]; <br>cp[i].second = <span class="hljs-number">0</span>;<br>&#125;<br>cp[i].<span class="hljs-keyword">index</span> = i;<br>&#125;<br>priority_queue&lt;compPair&gt; heap;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) &#123; heap.push(cp[i]); &#125;<br><span class="hljs-built_in">int</span> rank = <span class="hljs-number">0</span>;<br>compPair last;<br><span class="hljs-keyword">while</span> (!heap.empty())<br>&#123;<br><span class="hljs-keyword">if</span> (heap.top() &lt; last) &#123;rank++; last = heap.top(); &#125;<br><span class="hljs-keyword">order</span>[heap.top().<span class="hljs-keyword">index</span>] = rank;<br>heap.pop();<br>&#125;<br>subLen *= <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">void</span> initMSA(<span class="hljs-built_in">int</span>* sa, <span class="hljs-built_in">int</span>* rk, <span class="hljs-keyword">const</span> string&amp; <span class="hljs-built_in">str</span>) &#123;<br><span class="hljs-comment">//为倍增进行初始化、对第一行进行初始排序，时间复杂度为O（nlogn）</span><br>compChar* cc = <span class="hljs-keyword">new</span> compChar[<span class="hljs-built_in">str</span>.length()];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">str</span>.length(); i++) &#123;<br>cc[i].c = <span class="hljs-built_in">str</span>[i]; <br>cc[i].<span class="hljs-keyword">index</span> = i + <span class="hljs-number">1</span>;<br>&#125;<br>priority_queue&lt;compChar&gt; heapC;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">str</span>.length(); i++)heapC.push(cc[i]);<br><span class="hljs-built_in">int</span> stCRank = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">char</span> last = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span>* <span class="hljs-keyword">order</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-built_in">str</span>.length() + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">while</span> (!heapC.empty())<br>&#123;<br><span class="hljs-keyword">if</span> (heapC.top().c &gt; last) &#123; stCRank++; last = heapC.top().c; &#125;<br><span class="hljs-keyword">order</span>[heapC.top().<span class="hljs-keyword">index</span>] = stCRank;<br>heapC.pop();<br>&#125;<br><span class="hljs-comment">//循环执行倍增算法，时间复杂度为O（nlog^2(n)）</span><br>compPair* cp = <span class="hljs-keyword">new</span> compPair[<span class="hljs-built_in">str</span>.length() + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> subLen = <span class="hljs-number">1</span>; subLen*<span class="hljs-number">2</span>&lt;=<span class="hljs-built_in">str</span>.length();) doubleHeapSort(cp, <span class="hljs-keyword">order</span>, <span class="hljs-built_in">str</span>.length(),subLen);<br><span class="hljs-comment">//拷贝结果到rk数组,顺便生成sa数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">str</span>.length(); i++) &#123;<br>rk[i] = <span class="hljs-keyword">order</span>[i]; <br>sa[rk[i]] = i;<br>&#125;<br>delete[]<span class="hljs-keyword">order</span>, cp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="倍增算法"><a href="#倍增算法" class="headerlink" title="倍增算法"></a>倍增算法</h3><h4 id="直观感受”倍增“"><a href="#直观感受”倍增“" class="headerlink" title="直观感受”倍增“"></a>直观感受”倍增“</h4><p>拿DNA扩增过程中，DNA双链的总数举例，则每次扩增，其总数都乘2.</p><p>在这个关系中，可以认为”DNA双链总数“满足倍增的关系。</p><p>倍增，就是每次乘2.</p><h4 id="后缀数组中的倍增"><a href="#后缀数组中的倍增" class="headerlink" title="后缀数组中的倍增"></a>后缀数组中的倍增</h4><p>在后缀数组算法中，倍增是指每个子串的最大长度每次乘2.</p><p>为什么提最大长度？因为对于起始下标较大的子串，它们可能达不到这个值。</p><h4 id="倍增算法的优势"><a href="#倍增算法的优势" class="headerlink" title="倍增算法的优势"></a>倍增算法的优势</h4><p>暴力法求SA、RK数组，则需要O（n）的字符串比较和O（nlogn）的排序，加起来是O（n^2logn）。</p><p>如果不去比较字符串，而是只把各个子串以SA数组元素的方式呈现，则字符串的比较将降低至O（1）的。如果采用倍增，则需要logn次循环即可增到一个最大长度为n的子串。</p><p>则若使用快速排序或堆排序，算法复杂度是O（nlog^2(n)）。</p><h4 id="还有很大的优化空间"><a href="#还有很大的优化空间" class="headerlink" title="还有很大的优化空间"></a>还有很大的优化空间</h4><p>由于我们的RK数组的大小介于ASCII码个数（128）到源字符串长度之间，我们的RK数组的规模不会很大。如果我们将O（nlogn）的排序降低至O（n）的级别，那么是非常舒服的。</p><p>我们将得到一个O（nlogn）的算法，或准确地说是O（2nlogn）的。</p><p>因此引入通过两次执行计数排序，实现的双关键字基数排序的算法。</p><h2 id="基于多关键字基数排序的倍增算法"><a href="#基于多关键字基数排序的倍增算法" class="headerlink" title="基于多关键字基数排序的倍增算法"></a>基于多关键字基数排序的倍增算法</h2><h3 id="先看代码-2"><a href="#先看代码-2" class="headerlink" title="先看代码"></a>先看代码</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int i, m, p, w;<br>n = strlen(s + 1);<br>m = max(n, 128);//英文字符下，ASCII最多128个<br>for (int i = 1; i &lt;= n; i++)cnt<span class="hljs-comment">[rk<span class="hljs-comment">[i]</span> = s<span class="hljs-comment">[i]</span>]</span>++;<br>for (int i = 1; i &lt;= m; i++)cnt<span class="hljs-comment">[i]</span> += cnt<span class="hljs-comment">[i - 1]</span>;<br>for (int i = n; i &gt;= 1; i--)sa<span class="hljs-comment">[cnt<span class="hljs-comment">[rk<span class="hljs-comment">[i]</span>]</span>--]</span> = i;<br>for (w = 1; w &lt; n; w &lt;&lt;= 1) &#123;<br>    memset(cnt, 0, sizeof(cnt));<br>    memcpy(id, sa, sizeof(sa));<br>    for (int i = 1; i &lt;= n; i++)cnt<span class="hljs-comment">[rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>+w]</span>]</span>++;//+w在<span class="hljs-comment">[]</span>外面！<br>    for (int i = 1; i &lt;= m; i++)cnt<span class="hljs-comment">[i]</span> += cnt<span class="hljs-comment">[i - 1]</span>;<br>    for (int i = n; i &gt;= 1; i--)sa<span class="hljs-comment">[cnt<span class="hljs-comment">[rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span>+w]</span>]</span>--]</span> = id<span class="hljs-comment">[i]</span>;//此处是id<span class="hljs-comment">[i]</span>!<br>    memset(cnt, 0, sizeof(cnt));<br>    memcpy(id, sa, sizeof(sa));<br>    for (int i = 1; i &lt;= n; i++)cnt<span class="hljs-comment">[rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span>]</span>++;<br>    for (int i = 1; i &lt;= m; i++)cnt<span class="hljs-comment">[i]</span> += cnt<span class="hljs-comment">[i - 1]</span>;<br>    for (int i = n; i &gt;= 1; i--)sa<span class="hljs-comment">[cnt<span class="hljs-comment">[rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span>]</span>]</span>--]</span> = id<span class="hljs-comment">[i]</span>;<br>    memcpy(oldrk, rk, sizeof(rk));<br>    for (p = 0, i = 1; i &lt;= n; i++) oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span>]</span> &amp;&amp; oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span> + w]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span> + w]</span> ? rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = p : rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = ++p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><table><thead><tr><th>变量</th><th>解释</th></tr></thead><tbody><tr><td>s[N]</td><td>源字符串</td></tr><tr><td>n</td><td>源字符串长度</td></tr><tr><td>rk[N]</td><td>rk数组</td></tr><tr><td>sa[N]</td><td>sa数组</td></tr><tr><td>oldrk[N]</td><td>相对于本轮的双关键字基数排序，上一轮双关键字基数排序完成后计算出的rk数组的快照</td></tr><tr><td>id[N]</td><td>每次计数排序前的sa的快照</td></tr><tr><td>cnt[N]</td><td>用于计数排序</td></tr><tr><td>i</td><td>循环下标，无需每次新建了</td></tr><tr><td>m</td><td>计数排序中最大期望的出现的名次的个数</td></tr><tr><td>p</td><td>双关键字基数排序后，计算新rk时，代表本轮排名（每次+1）</td></tr><tr><td>w</td><td>倍增偏移量</td></tr></tbody></table><h3 id="基础算法思想"><a href="#基础算法思想" class="headerlink" title="基础算法思想"></a>基础算法思想</h3><h4 id="第一趟计数排序"><a href="#第一趟计数排序" class="headerlink" title="第一趟计数排序"></a>第一趟计数排序</h4><p>先进行一趟计数排序，确定子串长度为1时的rk和sa。</p><p>此处由于串长为1，故rk可以写入对应下标的char的ASCII码代替。它们天生有rk数组的那种对于字符串单调不降的性质。</p><p>对于aabaaaab样例，此时的rk数组为：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">97 </span><span class="hljs-number">97</span> <span class="hljs-number">98</span> <span class="hljs-number">97</span> <span class="hljs-number">97</span> <span class="hljs-number">97</span> <span class="hljs-number">97</span> <span class="hljs-number">98</span> <br></code></pre></td></tr></table></figure><p>其中，97是a的ASCII码，98是b的ASCII码。</p><p>此时的sa数组为：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span> <br></code></pre></td></tr></table></figure><p>每个元素代表以其元素值开始的长度为1的子串的单调不降排序情况。</p><p>即:1,2,3,5,6,7代表了a字符，3和8代表了b字符。</p><h4 id="后续的双关键字基数排序"><a href="#后续的双关键字基数排序" class="headerlink" title="后续的双关键字基数排序"></a>后续的双关键字基数排序</h4><p>分别连续对两个关键字进行计数排序，称为双关键字的基数排序。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for (w = 1; w &lt; n; w &lt;&lt;= 1)&#123;<br>    if(w&gt;=2)m = n;<br>    memset(cnt, 0, sizeof(cnt));//注意要初始化cnt数组，所有计数都从0开始。<br>    for (i = 1; i &lt;= n; ++i) id<span class="hljs-comment">[i]</span> = sa<span class="hljs-comment">[i]</span>;<br>    for (i = 1; i &lt;= n; ++i) ++cnt<span class="hljs-comment">[rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span> + w]</span>]</span>;<br>    for (i = 1; i &lt;= m; ++i) cnt<span class="hljs-comment">[i]</span> += cnt<span class="hljs-comment">[i - 1]</span>;<br>    for (i = n; i &gt;= 1; --i) sa<span class="hljs-comment">[cnt<span class="hljs-comment">[rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span> + w]</span>]</span>--]</span> = id<span class="hljs-comment">[i]</span>;<br>    ....//TODO: 再进行一轮对第一关键字的排序<br>&#125;<br></code></pre></td></tr></table></figure><p>以第二关键字的计数排序为例，算法思想如下：</p><p>先将排序前的sa数组存快照到id数组。</p><p>之后开始计数排序的一般步骤。</p><h5 id="循环条件"><a href="#循环条件" class="headerlink" title="循环条件"></a>循环条件</h5><p>w&lt;n，且每次w按位左移。</p><p>这样就能实现所谓倍增。</p><h5 id="rk数组的注意事项"><a href="#rk数组的注意事项" class="headerlink" title="rk数组的注意事项"></a>rk数组的注意事项</h5><p>rk数组要开源字符串长度的2倍大小。</p><p>因为当w=n时，sa[i]+w一般是&gt;w且&lt;2w的。</p><p>如果rk不够大就会<code>当场RE</code>。</p><p>而且，如果我们每次都把该数组初始化为全０，就能方便地达到”若第二关键字的子串不在源数组范围内，则使它的sa为0（也可认为是无穷小）“的效果。</p><h5 id="关于计数各个子串的rank"><a href="#关于计数各个子串的rank" class="headerlink" title="关于计数各个子串的rank"></a>关于计数各个子串的rank</h5><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for (i = 1; i &lt;= n; ++i) ++cnt<span class="hljs-comment">[rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span> + w]</span>]</span>;<br></code></pre></td></tr></table></figure><p>id[i]是sa[i]的快照，随着i的增大，以其对应下标的元素为起始的长度为w/2的子串是依次呈单调不降排列的。</p><p>因此我们只需要让i增加，其对应的rank就是单调不降地被枚举出来的。</p><p>以这种次序，可以完成对各种可能的rank的计数。</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="关于求前缀和"><a href="#关于求前缀和" class="headerlink" title="关于求前缀和"></a>关于求前缀和</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> (i = <span class="hljs-number">1</span>; i &lt;= m; ++i) cnt[i] += cnt[i - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>对于计数结果从小到大遍历求和，则可以得到各个计数对应元素的最后一个结果下标。</p><p>这里的循环条件是遍历到m为止。m的定义是期望的计数元素。</p><p>对于w=0情况下的计数排序，rank是以ASCII码的形式存储，故m应当不小于ASCII的最大值128.</p><p>对于w&gt;=2情况下的计数排序，由于在w=1的那次计数排序中，已经更新rank为从1开始的int数，故rank中的值都必然小于等于源字符串的长度。（这个过程下文会介绍）</p><p>因此w=0时，m的初始化如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">m</span> = max(n, <span class="hljs-number">128</span>)<span class="hljs-comment">;//英文字符下，ASCII最多128个</span><br></code></pre></td></tr></table></figure><p>进入w&gt;=2的计数排序时，m剪枝为:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">if(w&gt;=<span class="hljs-number">2</span>) m = n<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p>有序性即排序前B排在A的后面，则排序后B也要排在A的后面才行。由于cnt保存的是计数对应元素的最后一个结果下标，故其能记录下有序性。</p><p>这里有序性是至关重要的。因为对于双关键字的基数排序，我们先对第二关键字进行排序，然后再对第一关键字排序。第一关键字排序是在第二关键字排序的结果基础上进行。在第一关键字排序中，如果两个元素的第一关键字不相等，则会直接抹去第二关键字排序中这两个元素的第二关键字的大小关系。反之，如果第一关键字排序中，这两个元素的关键字相等，则会保留第二关键字排序中原有的大小关系。这种”保留“需要依靠计数排序的稳定性。</p><p>例如：在第二关键字排序上，升序排列为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">xxxxabxxxx</span><br></code></pre></td></tr></table></figure><p>然而a、b的第一关键字相等，则第一关键字排序后，排序结果仍为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">xxxxabxxxx</span><br></code></pre></td></tr></table></figure><p>但是设想如果破坏了稳定性，则可能出现</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">xxxxbaxxxx</span><br></code></pre></td></tr></table></figure><p>那么这样就不符合多关键字中的”先考虑第一关键字，如果相等才去考虑第二关键字“的原则了。只有保证了每一步的稳定性，才能确保规则100%成立。</p><h5 id="关于导出排序结果"><a href="#关于导出排序结果" class="headerlink" title="关于导出排序结果"></a>关于导出排序结果</h5><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for (i = n; i &gt;= 1; --i) sa<span class="hljs-comment">[cnt<span class="hljs-comment">[rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span> + w]</span>]</span>--]</span> = id<span class="hljs-comment">[i]</span>;<br></code></pre></td></tr></table></figure><p><code>有序性</code>  以倒序遍历cnt数组，以保证排序结果的有序性。</p><p>由于各个id作为下标的情况下，rk[id[i]]是单调不降数组，故我们正在逆序遍历cnt，符合计数排序最后一步的定义。</p><p>将sa更新即可。</p><p>（注：sa数组是不会出现重复元素的。因为它的元素代表子串的起始位置。而每个子串是唯一的。）</p><h5 id="子串的归并"><a href="#子串的归并" class="headerlink" title="子串的归并"></a>子串的归并</h5><p><code>注</code>  虽然这里我们的排序对象是id[i]+w，但是我们的赋值是id[i]。这一个操作就实现了两个子串的<code>归并</code>。</p><h4 id="计算新的rk数组"><a href="#计算新的rk数组" class="headerlink" title="计算新的rk数组"></a>计算新的rk数组</h4><p>按上述方法跑完两趟计数排序，就完成了双关键字的基数排序。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">   memcpy(oldrk, rk, sizeof(rk));//获得rk更新前的快照（因为接下来rk就要被更新了）<br>for (p = 0, i = 1; i &lt;= n; ++i) &#123;<br>     if (oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span>]</span> &amp;&amp;<br>         oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span> + w]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span> + w]</span>) &#123;<br>         rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = p;<br>     &#125;<br>     else &#123;<br>         rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = ++p;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="遍历顺序"><a href="#遍历顺序" class="headerlink" title="遍历顺序"></a>遍历顺序</h5><p>维护一个p，代表rk数组中此位置的值。</p><p>同样地，正序遍历sa，则得到的rk[sa[i]]是（单调不降的子串序列）（断个句）的首下标。</p><p>由于它们单调不降，我们把新值按单调不降的顺序往rk数组里填即可。从0开始，逐渐上升。</p><h5 id="p是增加，还是不变？"><a href="#p是增加，还是不变？" class="headerlink" title="p是增加，还是不变？"></a>p是增加，还是不变？</h5><p>按单调不降原则，如果当前对象的值和前一个相等，则它们的名次应当相等。此时p还用上一轮的p即可。否则如果不相等，则其名次更新为++p。</p><p>判断”当前对象的值和前一个相等“的方法很简单：由于现在这个子串是由两个串合并（倍增）而来，所以只需要判断合并所需原料完全相等即可。即原来的首关键字相等，第二关键字也相等。</p><h3 id="小优化：使用及时终止的倍增算法"><a href="#小优化：使用及时终止的倍增算法" class="headerlink" title="小优化：使用及时终止的倍增算法"></a>小优化：使用及时终止的倍增算法</h3><p>在每次生成RK数组，都会维护一个p，其等于当前RK数组的值域。即：当前有多少个可区分的单调不降的名次。</p><p>如果每个子串的RK互不相同，则我们认为后缀数组已经生成。利用这个特点，我们做以下优化：</p><p>我们利用这个p，在每次倍增的结束时做以下判断，并直接生成最终的sa数组即可。算法提前结束。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">if</span> (p == <span class="hljs-built_in">n</span>) &#123;<br>  for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">n</span>; ++i) sa[rk[i]] = i;<br>  break;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常数优化：减少O-n-次的计数排序"><a href="#常数优化：减少O-n-次的计数排序" class="headerlink" title="常数优化：减少O(n)次的计数排序"></a>常数优化：减少O(n)次的计数排序</h3><p>优化效果：让O(2nlogn)变成O(nlogn)</p><p>老规矩先看代码：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int i, m, p, w;<br>n = strlen(s + 1);<br>m = max(n, 128);<br>for (int i = 1; i &lt;= n; i++)cnt<span class="hljs-comment">[rk<span class="hljs-comment">[i]</span> = s<span class="hljs-comment">[i]</span>]</span>++;<br>for (int i = 1; i &lt;= m; i++)cnt<span class="hljs-comment">[i]</span> += cnt<span class="hljs-comment">[i - 1]</span>;<br>for (int i = n; i &gt;= 1; i--)sa<span class="hljs-comment">[cnt<span class="hljs-comment">[rk<span class="hljs-comment">[i]</span>]</span>--]</span> = i;<br>for (w = 1; w &lt; n; w &lt;&lt;= 1) &#123;<br>    memset(cnt, 0, sizeof(cnt));<br>    memcpy(id, sa, sizeof(sa));<br>    for (p = 0, i = n; i &gt; n - w; --i) id<span class="hljs-comment">[++p]</span> = i;<br>    for (i = 1; i &lt;= n; ++i) if (sa<span class="hljs-comment">[i]</span> &gt; w) id<span class="hljs-comment">[++p]</span> = sa<span class="hljs-comment">[i]</span> - w;<br>    memset(cnt, 0, sizeof(cnt));<br>    for (int i = 1; i &lt;= n; i++)cnt<span class="hljs-comment">[rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span>]</span>++;<br>    for (int i = 1; i &lt;= m; i++)cnt<span class="hljs-comment">[i]</span> += cnt<span class="hljs-comment">[i - 1]</span>;<br>    for (int i = n; i &gt;= 1; i--)sa<span class="hljs-comment">[cnt<span class="hljs-comment">[rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span>]</span>]</span>--]</span> = id<span class="hljs-comment">[i]</span>;<br>    memcpy(oldrk, rk, sizeof(rk));<br>    for (p = 0, i = 1; i &lt;= n; i++) oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span>]</span> &amp;&amp; oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span> + w]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span> + w]</span>? rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = p: rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = ++p;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要将针对第二关键字的计数排序修改为：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">memcpy(id</span><span class="hljs-string">,</span> <span class="hljs-comment">sa</span><span class="hljs-string">,</span> <span class="hljs-comment">sizeof(sa));</span><br><span class="hljs-comment">for</span> <span class="hljs-comment">(p</span> <span class="hljs-comment">=</span> <span class="hljs-comment">0</span><span class="hljs-string">,</span> <span class="hljs-comment">i</span> <span class="hljs-comment">=</span> <span class="hljs-comment">n;</span> <span class="hljs-comment">i</span> &gt; <span class="hljs-comment">n</span> <span class="hljs-literal">-</span> <span class="hljs-comment">w;</span> --<span class="hljs-comment">i)</span> <span class="hljs-comment">id</span><span class="hljs-title">[</span>++<span class="hljs-comment">p</span><span class="hljs-title">]</span> <span class="hljs-comment">=</span> <span class="hljs-comment">i;</span><br><span class="hljs-comment">for</span> <span class="hljs-comment">(i</span> <span class="hljs-comment">=</span> <span class="hljs-comment">1;</span> <span class="hljs-comment">i</span> &lt;<span class="hljs-comment">=</span> <span class="hljs-comment">n;</span> ++<span class="hljs-comment">i)</span> <span class="hljs-comment">if</span> <span class="hljs-comment">(sa</span><span class="hljs-title">[</span><span class="hljs-comment">i</span><span class="hljs-title">]</span> &gt; <span class="hljs-comment">w)</span> <span class="hljs-comment">id</span><span class="hljs-title">[</span>++<span class="hljs-comment">p</span><span class="hljs-title">]</span> <span class="hljs-comment">=</span> <span class="hljs-comment">sa</span><span class="hljs-title">[</span><span class="hljs-comment">i</span><span class="hljs-title">]</span> <span class="hljs-literal">-</span> <span class="hljs-comment">w;</span><br></code></pre></td></tr></table></figure><p>并去掉针对第一关键字的计数排序的id数组初始化（减少一次赋值）。</p><h4 id="将sa数组中，第二关键字为0的元素拿出来，放到id数组的最开始"><a href="#将sa数组中，第二关键字为0的元素拿出来，放到id数组的最开始" class="headerlink" title="将sa数组中，第二关键字为0的元素拿出来，放到id数组的最开始"></a>将sa数组中，第二关键字为0的元素拿出来，放到id数组的最开始</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">for</span> <span class="hljs-comment">(p</span> <span class="hljs-comment">=</span> <span class="hljs-comment">0</span><span class="hljs-string">,</span> <span class="hljs-comment">i</span> <span class="hljs-comment">=</span> <span class="hljs-comment">n;</span> <span class="hljs-comment">i</span> &gt; <span class="hljs-comment">n</span> <span class="hljs-literal">-</span> <span class="hljs-comment">w;</span> --<span class="hljs-comment">i)</span> <span class="hljs-comment">id</span><span class="hljs-title">[</span>++<span class="hljs-comment">p</span><span class="hljs-title">]</span> <span class="hljs-comment">=</span> <span class="hljs-comment">i;</span><br></code></pre></td></tr></table></figure><p>这些元素不会存在第二关键字（或称第二关键字为0），所以这几个元素本身就是用于下一次计数排序的第一关键字了。</p><p>因为这些元素的第二关键字为0，这些元素在优化前的第一次计数排序完成后，都是直接排在最开始的连续位置。（连续长度为w）。</p><p>从下一次计数排序的视角讲，下一次计数排序只是在上一次给出的有序性的基础上进行。但是对于前面这几个元素来讲，它们第二关键字对应的rank一定都是0，即认为相等。（因为这些第二关键字的下标已经大于n了。而rk数组在初始化的时候，其&gt;n的部分都是0.）</p><p>因为rk中这些第二关键字都是0，所以在后续生成新的rk数组时，凡是提到它们的第二关键字的rk，永远都是恒等于0的值。</p><p>回想这段生成新rk数组的算法:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for (p = 0, i = 1; i &lt;= n; i++) oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span>]</span> &amp;&amp; oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span> + w]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span> + w]</span>? rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = p: rk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span>]</span> = ++p;<br></code></pre></td></tr></table></figure><p>显然，这个条件：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i]</span> + w]</span> == oldrk<span class="hljs-comment">[sa<span class="hljs-comment">[i - 1]</span> + w]</span><br></code></pre></td></tr></table></figure><p>是满足的。因为都是0.</p><p>则无论这些元素的第一关键字如何排列，都不会影响它们生成rk数组时，关于”相等“的判断。</p><p>所以我们可以任意把他们排列在sa的头w个位置，它们排列的情况有它们的全排列数种。</p><p>这里为了方便，我们采用降序排列在这里。</p><h4 id="将剩下的子串起始下标按在sa内的顺序，反推出其第一关键字下标，依次放进id"><a href="#将剩下的子串起始下标按在sa内的顺序，反推出其第一关键字下标，依次放进id" class="headerlink" title="将剩下的子串起始下标按在sa内的顺序，反推出其第一关键字下标，依次放进id"></a>将剩下的子串起始下标按在sa内的顺序，反推出其第一关键字下标，依次放进id</h4><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for (i = 1; i &lt;= n; ++i) if (sa<span class="hljs-comment">[i]</span> &gt; w) id<span class="hljs-comment">[++p]</span> = sa<span class="hljs-comment">[i]</span> - w;<br></code></pre></td></tr></table></figure><p>这里的这些起始下标在sa中，意味着它们是以上一轮基数排序的顺序排列（单调不降）。</p><p>我们需要在这些下标中找到有可能成为第二关键字的下标，即筛选条件为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">if (sa<span class="hljs-selector-attr">[i]</span> &gt; w)<br></code></pre></td></tr></table></figure><p>按这些第二关键字的下标，反推其第一关键字的下标，并将这些下标放到id中。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">id<span class="hljs-comment">[++p]</span> = sa<span class="hljs-comment">[i]</span> - w;<br></code></pre></td></tr></table></figure><p>这就相当于，当前id中保存了所有第一关键字按其第二关键字进行单调不降的排序的结果。</p><p>我们如果再进行一次单调不降的计数排序，就得到了子串长度为w的sa数组。</p><h3 id="常数优化：优化计数排序时关键字的值域"><a href="#常数优化：优化计数排序时关键字的值域" class="headerlink" title="常数优化：优化计数排序时关键字的值域"></a>常数优化：优化计数排序时关键字的值域</h3><p>该优化针对规模较大的源数组比较有用。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">for</span> (w = <span class="hljs-number">1</span>; <span class="hljs-attribute">w</span> &lt; n; <span class="hljs-attribute">w</span> &lt;&lt;= <span class="hljs-number">1</span>，m = p) <br></code></pre></td></tr></table></figure><p>即：在for循环的操作中，每次将m更新为p。</p><p>因为每轮生成新的RK数组时，p都被更新为当前RK数组的值域。</p><p>又因为计数排序是对RK数组的元素进行计数，所以可以通过这种方式来降低计数循环的循环次数上限。</p><p>例如：源数组为1e5的长度，那如果不优化，每次都要循环1e5去计数，这还没包括其他操作呢。1ms显然不够程序跑完。但是如果优化了，刚开始由于RK数组较小，m也就小，计数循环也就到不了1e5的级别。</p><h3 id="性能优化：减少不连续的访存"><a href="#性能优化：减少不连续的访存" class="headerlink" title="性能优化：减少不连续的访存"></a>性能优化：减少不连续的访存</h3><p>该优化针对规模较大的源数组比较有用。</p><p>我们格外维护一个px[]数组，大小和rk相符，令其满足px[i]=rk[id[i]].</p><p>在计数时，顺便把rk[id[i]]存给px[i]，如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for (i = 1; i &lt;= n; ++i) ++cnt<span class="hljs-comment">[px<span class="hljs-comment">[i]</span> = rk<span class="hljs-comment">[id<span class="hljs-comment">[i]</span>]</span>]</span>;<br></code></pre></td></tr></table></figure><p>在后续访问时，都将rk[id[i]]用px[i]代替即可，如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for (i = n; i &gt;= 1; --i) sa<span class="hljs-comment">[cnt<span class="hljs-comment">[px<span class="hljs-comment">[i]</span>]</span>--]</span> = id<span class="hljs-comment">[i]</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ 拉面馆题解 (编码和位运算)</title>
    <link href="/2021/04/09/SDUOJ%20-%205/"/>
    <url>/2021/04/09/SDUOJ%20-%205/</url>
    
    <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>首先定义t、s数组，分别用于存储面制作完成的时间点和顾客到达的时间点。</p><p>定义set st的数组，大小为8（即8个set构成的set数组），用于存储每种面（一种调料组合就被称为”一种”面）制作完成的时间。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>先输入n，m，k。</p><p>接下来开始循环处理制作的面，时间复杂度O(n)：用三位二进制数表示面里调料的有无。初始为0，即000。然后初始化一个当前调料为001.根据输入的调料编号，将上述001二进制数左移即可。最后根据上述二进制数的值和1-8依次做或，如果或运算等于后者，则说明该面含有的调料种类是后者的子集。将该碗面制作完成的时间放进st中。</p><p>接下来循环处理客人的到达，时间复杂度O(m*n): 用完全相同的方式得出客人需要的面的二进制数，并从st集合对应下标中取begin（利用set的有序性得到最早制作完成的面）。如果st集合该下标为空，代表需要的面不存在，则输出angry即可。否则存在，则需要删除这碗面：注意要再遍历set数组，把其中具有与此相同制作时间的面删除。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">200010</span>;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; st[<span class="hljs-number">8</span>];     <br><span class="hljs-keyword">int</span> t[inf], s[inf]; <span class="hljs-comment">//t[i]:每碗面制作完成的时间点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m, k; <span class="hljs-comment">//n:制作的面的数量 m:顾客的数量 k:配料的种类数</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; t[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> kk, v = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; kk;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= kk; j++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x; <span class="hljs-comment">//该碗面含有的配料编号</span><br>            <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>            v |= (<span class="hljs-number">1</span> &lt;&lt; (x - <span class="hljs-number">1</span>)); <br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">8</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((v &amp; j) == j) <br>            &#123;<br>                st[j].emplace(t[i]); <br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s[i]; <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> cc, v = <span class="hljs-number">0</span>; <span class="hljs-comment">//cc:客人喜爱配料的种类数</span><br>        <span class="hljs-built_in">cin</span> &gt;&gt; cc;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= cc; j++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>            v |= (<span class="hljs-number">1</span> &lt;&lt; (x - <span class="hljs-number">1</span>)); <br>        &#125; <span class="hljs-comment">// 代表该客人喜欢吃的配料</span><br>            <span class="hljs-keyword">if</span> (st[v].empty())     <span class="hljs-comment">//该客人喜欢吃的配料没有对应的面</span><br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Angry\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> vv = *st[v].rbegin();    /<br>                <span class="hljs-built_in">cout</span> &lt;&lt; (s[i] - vv) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; <br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">8</span>; j++)<br>                &#123;<br>                    st[j].erase(vv); <br>                &#125;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ 看电影题解（流水线调度问题）</title>
    <link href="/2021/04/09/SDUOJ%20-%206/"/>
    <url>/2021/04/09/SDUOJ%20-%206/</url>
    
    <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>首先定义person结构体，存储a、b。</p><p>重载小于运算符，使该结构体的排序规则符合Johnson法则。</p><h2 id="Johnson法则"><a href="#Johnson法则" class="headerlink" title="Johnson法则"></a>Johnson法则</h2><p>对一个人，如果它的A时间&lt;=B时间，则与其同类的排序规则是按a升序；如果它的A时间&lt;B时间，则与同类的排序规则是按b降序。最后，将上述后一类人连接到前一类人的末尾，组成的整个序列就是最优的流水线调度序列。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>根据Johnson法则构造一个最优序列，按如下算法计算总时间即可：</p><p>对于A影院，无脑累加时间，并记录每个人观影结束时间。</p><p>对于B影院，如果当前累计时间小于下一个要来B看电影的人在A的结束时间，就让当前累计时间直接等于该人在A的结束时间。之后把该人在B看电影的花费时间再累加上去即可。</p><p>最后输出A影院时间累计和B影院时间累计的较大的一个。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">bool</span> isA;<br>Person(<span class="hljs-keyword">int</span> a_, <span class="hljs-keyword">int</span> b_, <span class="hljs-keyword">bool</span> isA_) :a(a_), b(b_), isA(isA_) &#123;&#125;;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> Person&amp; p) <span class="hljs-keyword">const</span> &#123;<br><span class="hljs-keyword">if</span> (isA) <span class="hljs-keyword">return</span> a &lt; p.a;<br><span class="hljs-keyword">return</span> b &gt; p.b;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;a, b;<br><span class="hljs-built_in">vector</span>&lt;Person&gt; peopleA;<br><span class="hljs-built_in">vector</span>&lt;Person&gt; peopleB;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; aEnd;<br><span class="hljs-keyword">int</span> aTimeAcc = <span class="hljs-number">0</span>, bEnd = <span class="hljs-number">0</span>, bCntr = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<span class="hljs-built_in">cin</span> &gt;&gt; b[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)a[i] &lt;= b[i] ? peopleA.emplace_back(a[i], b[i], <span class="hljs-literal">true</span>) : peopleB.emplace_back(a[i], b[i], <span class="hljs-literal">false</span>);<br>sort(peopleA.begin(), peopleA.end());<br>sort(peopleB.begin(), peopleB.end());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ite = peopleA.begin(); ite != peopleA.end(); ite++) &#123;<br>aTimeAcc += ite-&gt;a;<br>aEnd.push_back(aTimeAcc);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ite = peopleB.begin(); ite != peopleB.end(); ite++) &#123;<br>aTimeAcc += ite-&gt;a;<br>aEnd.push_back(aTimeAcc);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ite = peopleA.begin(); ite != peopleA.end(); ite++) &#123;<br><span class="hljs-keyword">if</span> (bEnd &lt; aEnd[bCntr]) bEnd = aEnd[bCntr];<br>bEnd += ite-&gt;b;<br>bCntr++;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ite = peopleB.begin(); ite != peopleB.end(); ite++) &#123;<br><span class="hljs-keyword">if</span> (bEnd &lt; aEnd[bCntr]) bEnd = aEnd[bCntr];<br>bEnd += ite-&gt;b;<br>bCntr++;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; max(bEnd, aTimeAcc) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDUOJ 摆放垃圾桶题解 (简单贪心)</title>
    <link href="/2021/04/09/SDUOJ%20-%207/"/>
    <url>/2021/04/09/SDUOJ%20-%207/</url>
    
    <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>首先定义struct requirement，其中存放每个要求的l、r、k。</p><p>定义exsist，当前区间存在的垃圾桶个数。</p><p>ans，输出结果。</p><p>map sts，用于模拟数组，给出每个下标处是否有垃圾桶。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>先输入并构造各个要求。</p><p>对于每个要求，先从该要求的l遍历到r，收集这段区间内垃圾桶总个数（够了k就及时终止。）时间复杂度O（n）。</p><p>之后，如果垃圾桶不够，就从r往l遍历，如果放了桶就跳过，如果没放过桶就ans++，并且更新此处的sts为true，并让exist++，代表该区间又多了一个桶。如果exist够了k，则及时终止。时间复杂度O（n）。</p><p>输出结果即可。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">requirment</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> l;<br><span class="hljs-keyword">int</span> r;<br><span class="hljs-keyword">int</span> k;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt; (requirment re)<span class="hljs-keyword">const</span> &#123;<br><span class="hljs-keyword">return</span> r &lt; re.r;<br>&#125;<br>requirment(<span class="hljs-keyword">int</span> l_, <span class="hljs-keyword">int</span> r_, <span class="hljs-keyword">int</span> k_) :l(l_), r(r_), k(k_) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> l, r, k;<br><span class="hljs-keyword">int</span> exsist, ans;<br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>&gt; sts;<br><span class="hljs-built_in">multiset</span>&lt;requirment&gt; inputs;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">//freopen(&quot;C:\\Users\\Lenovo\\Desktop\\a.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> yq = <span class="hljs-number">1</span>; yq &lt;= m; yq++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;k);<br>inputs.emplace(l, r, k);<br>&#125;<br><span class="hljs-comment">//sort(inputs.begin(), inputs.end());</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ite = inputs.begin(); ite != inputs.end(); ite++) &#123;<br>exsist = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = ite-&gt;r; i &gt;= ite-&gt;l; i--) <span class="hljs-keyword">if</span> (sts[i]) &#123;<br>exsist++;<br><span class="hljs-keyword">if</span> (exsist &gt;= ite-&gt;k)<span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (exsist &lt; ite-&gt;k) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = ite-&gt;r; i &gt;= ite-&gt;l; i--) &#123;<br><span class="hljs-keyword">if</span> (exsist &gt;= ite-&gt;k)<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (!sts[i]) &#123;<br>sts[i] = <span class="hljs-literal">true</span>;<br>exsist++;<br>ans++;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello everyone</title>
    <link href="/2021/03/15/hello-everyone/"/>
    <url>/2021/03/15/hello-everyone/</url>
    
    <content type="html"><![CDATA[<h3 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h3><p>哈哈哈！这里是第一篇博客~嗯。</p><p>这次连接到了域名~</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
